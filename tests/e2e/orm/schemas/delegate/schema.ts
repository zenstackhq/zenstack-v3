//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

/* eslint-disable */

import { type SchemaDef, ExpressionUtils } from "@zenstackhq/runtime/schema";
export const schema = {
    provider: {
        type: "sqlite"
    },
    models: {
        User: {
            name: "User",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                email: {
                    name: "email",
                    type: "String",
                    unique: true,
                    optional: true,
                    attributes: [{ name: "@unique" }]
                },
                level: {
                    name: "level",
                    type: "Int",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                },
                assets: {
                    name: "assets",
                    type: "Asset",
                    array: true,
                    relation: { opposite: "owner" }
                },
                ratedVideos: {
                    name: "ratedVideos",
                    type: "RatedVideo",
                    array: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("direct") }] }],
                    relation: { opposite: "user", name: "direct" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" },
                email: { type: "String" }
            }
        },
        Comment: {
            name: "Comment",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                content: {
                    name: "content",
                    type: "String"
                },
                asset: {
                    name: "asset",
                    type: "Asset",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("assetId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "comments", fields: ["assetId"], references: ["id"], onDelete: "Cascade" }
                },
                assetId: {
                    name: "assetId",
                    type: "Int",
                    optional: true,
                    foreignKeyFor: [
                        "asset"
                    ]
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        },
        Asset: {
            name: "Asset",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                viewCount: {
                    name: "viewCount",
                    type: "Int",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                },
                owner: {
                    name: "owner",
                    type: "User",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("ownerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "assets", fields: ["ownerId"], references: ["id"], onDelete: "Cascade" }
                },
                ownerId: {
                    name: "ownerId",
                    type: "Int",
                    optional: true,
                    foreignKeyFor: [
                        "owner"
                    ]
                },
                comments: {
                    name: "comments",
                    type: "Comment",
                    array: true,
                    relation: { opposite: "asset" }
                },
                assetType: {
                    name: "assetType",
                    type: "String",
                    isDiscriminator: true
                }
            },
            attributes: [
                { name: "@@delegate", args: [{ name: "discriminator", value: ExpressionUtils.field("assetType") }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            },
            isDelegate: true,
            subModels: ["Video", "Image"]
        },
        Video: {
            name: "Video",
            baseModel: "Asset",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    originModel: "Asset",
                    attributes: [{ name: "@updatedAt" }]
                },
                viewCount: {
                    name: "viewCount",
                    type: "Int",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                },
                owner: {
                    name: "owner",
                    type: "User",
                    optional: true,
                    originModel: "Asset",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("ownerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "assets", fields: ["ownerId"], references: ["id"], onDelete: "Cascade" }
                },
                ownerId: {
                    name: "ownerId",
                    type: "Int",
                    optional: true,
                    originModel: "Asset",
                    foreignKeyFor: [
                        "owner"
                    ]
                },
                comments: {
                    name: "comments",
                    type: "Comment",
                    array: true,
                    originModel: "Asset",
                    relation: { opposite: "asset" }
                },
                assetType: {
                    name: "assetType",
                    type: "String",
                    originModel: "Asset",
                    isDiscriminator: true
                },
                duration: {
                    name: "duration",
                    type: "Int"
                },
                url: {
                    name: "url",
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                videoType: {
                    name: "videoType",
                    type: "String",
                    isDiscriminator: true
                }
            },
            attributes: [
                { name: "@@delegate", args: [{ name: "discriminator", value: ExpressionUtils.field("videoType") }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" },
                url: { type: "String" }
            },
            isDelegate: true,
            subModels: ["RatedVideo"]
        },
        RatedVideo: {
            name: "RatedVideo",
            baseModel: "Video",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    originModel: "Asset",
                    attributes: [{ name: "@updatedAt" }]
                },
                viewCount: {
                    name: "viewCount",
                    type: "Int",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                },
                owner: {
                    name: "owner",
                    type: "User",
                    optional: true,
                    originModel: "Asset",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("ownerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "assets", fields: ["ownerId"], references: ["id"], onDelete: "Cascade" }
                },
                ownerId: {
                    name: "ownerId",
                    type: "Int",
                    optional: true,
                    originModel: "Asset",
                    foreignKeyFor: [
                        "owner"
                    ]
                },
                comments: {
                    name: "comments",
                    type: "Comment",
                    array: true,
                    originModel: "Asset",
                    relation: { opposite: "asset" }
                },
                assetType: {
                    name: "assetType",
                    type: "String",
                    originModel: "Asset",
                    isDiscriminator: true
                },
                duration: {
                    name: "duration",
                    type: "Int",
                    originModel: "Video"
                },
                url: {
                    name: "url",
                    type: "String",
                    unique: true,
                    originModel: "Video",
                    attributes: [{ name: "@unique" }]
                },
                videoType: {
                    name: "videoType",
                    type: "String",
                    originModel: "Video",
                    isDiscriminator: true
                },
                rating: {
                    name: "rating",
                    type: "Int"
                },
                user: {
                    name: "user",
                    type: "User",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("direct") }, { name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("userId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "ratedVideos", name: "direct", fields: ["userId"], references: ["id"], onDelete: "Cascade" }
                },
                userId: {
                    name: "userId",
                    type: "Int",
                    optional: true,
                    foreignKeyFor: [
                        "user"
                    ]
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" },
                url: { type: "String" }
            }
        },
        Image: {
            name: "Image",
            baseModel: "Asset",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    originModel: "Asset",
                    attributes: [{ name: "@updatedAt" }]
                },
                viewCount: {
                    name: "viewCount",
                    type: "Int",
                    originModel: "Asset",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                },
                owner: {
                    name: "owner",
                    type: "User",
                    optional: true,
                    originModel: "Asset",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("ownerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "assets", fields: ["ownerId"], references: ["id"], onDelete: "Cascade" }
                },
                ownerId: {
                    name: "ownerId",
                    type: "Int",
                    optional: true,
                    originModel: "Asset",
                    foreignKeyFor: [
                        "owner"
                    ]
                },
                comments: {
                    name: "comments",
                    type: "Comment",
                    array: true,
                    originModel: "Asset",
                    relation: { opposite: "asset" }
                },
                assetType: {
                    name: "assetType",
                    type: "String",
                    originModel: "Asset",
                    isDiscriminator: true
                },
                format: {
                    name: "format",
                    type: "String"
                },
                gallery: {
                    name: "gallery",
                    type: "Gallery",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("galleryId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "images", fields: ["galleryId"], references: ["id"], onDelete: "Cascade" }
                },
                galleryId: {
                    name: "galleryId",
                    type: "Int",
                    optional: true,
                    foreignKeyFor: [
                        "gallery"
                    ]
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        },
        Gallery: {
            name: "Gallery",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                images: {
                    name: "images",
                    type: "Image",
                    array: true,
                    relation: { opposite: "gallery" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        }
    },
    authType: "User",
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
