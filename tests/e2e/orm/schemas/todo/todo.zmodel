/*
* Sample model for a collaborative Todo app
*/

datasource db {
    provider = 'sqlite'
    url = ':memory:'
}

generator js {
    provider = 'prisma-client-js'
}

/*
 * Model for a space in which users can collaborate on Lists and Todos
 */
model Space {
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    name      String      @length(4, 50)
    slug      String      @unique @length(4, 16)
    owner     User?       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String?
    members   SpaceUser[]
    lists     List[]

    // require login
    @@deny('all', auth() == null)

    // everyone can create a space
    @@allow('create', true)

    // any user in the space can read the space
    @@allow('read', members?[userId == auth().id])

    // space admin can update and delete
    @@allow('update,delete', members?[userId == auth().id && role == 'ADMIN'])
}

/*
 * Model representing membership of a user in a space
 */
model SpaceUser {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      String
    @@unique([userId, spaceId])

    // require login
    @@deny('all', auth() == null)

    // space admin can create/update/delete
    @@allow('create,update,delete', space.ownerId == auth().id || space.members?[userId == auth().id && role == 'ADMIN'])

    // user can read entries for spaces which he's a member of
    @@allow('read', space.members?[userId == auth().id])
}

/*
 * Model for a user
 */
model User {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    email         String      @unique @email
    password      String?
    emailVerified DateTime?
    name          String?
    bio           String?     @ignore
    ownedSpaces   Space[]
    spaces        SpaceUser[]
    image         String?     @url
    lists         List[]
    todos         Todo[]

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by users sharing any space
    @@allow('read', spaces?[space.members?[userId == auth().id]])

    // full access by oneself
    @@allow('all', auth().id == id)
}

/*
 * Model for a Todo list
 */
model List {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    title     String   @length(1, 100)
    private   Boolean  @default(false)
    todos     Todo[]
    revision  Int      @default(0)

    // require login
    @@deny('all', auth() == null)

    // can be read by owner or space members (only if not private)
    @@allow('read', ownerId == auth().id || (space.members?[userId == auth().id] && !private))

    // when create, owner must be set to current user, and user must be in the space
    @@allow('create', ownerId == auth().id && space.members?[userId == auth().id])

    // when create, owner must be set to current user, and user must be in the space
    // update is not allowed to change owner
    @@allow('update', ownerId == auth().id && space.members?[userId == auth().id])

    @@deny('post-update', before().ownerId != ownerId)

    // can be deleted by owner
    @@allow('delete', ownerId == auth().id)
}

/*
 * Model for a single Todo
 */
model Todo {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId      String
    title       String    @length(1, 100)
    completedAt DateTime?

    // require login
    @@deny('all', auth() == null)

    // owner has full access, also space members have full access (if the parent List is not private)
    @@allow('all', list.ownerId == auth().id)
    @@allow('all', list.space.members?[userId == auth().id] && !list.private)

    // update is not allowed to change owner
    @@deny('post-update', before().ownerId != ownerId)
}
