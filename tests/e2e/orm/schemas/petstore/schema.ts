//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

/* eslint-disable */

import { type SchemaDef, ExpressionUtils } from "@zenstackhq/runtime/schema";
export const schema = {
    provider: {
        type: "sqlite"
    },
    models: {
        User: {
            name: "User",
            fields: {
                id: {
                    name: "id",
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                email: {
                    name: "email",
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                orders: {
                    name: "orders",
                    type: "Order",
                    array: true,
                    relation: { opposite: "user" }
                }
            },
            attributes: [
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("create") }, { name: "condition", value: ExpressionUtils.literal(true) }] },
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("read") }, { name: "condition", value: ExpressionUtils.literal(true) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                email: { type: "String" }
            }
        },
        Pet: {
            name: "Pet",
            fields: {
                id: {
                    name: "id",
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                name: {
                    name: "name",
                    type: "String"
                },
                category: {
                    name: "category",
                    type: "String"
                },
                order: {
                    name: "order",
                    type: "Order",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("orderId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "pets", fields: ["orderId"], references: ["id"] }
                },
                orderId: {
                    name: "orderId",
                    type: "String",
                    optional: true,
                    foreignKeyFor: [
                        "order"
                    ]
                }
            },
            attributes: [
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("read") }, { name: "condition", value: ExpressionUtils.binary(ExpressionUtils.binary(ExpressionUtils.field("orderId"), "==", ExpressionUtils._null()), "||", ExpressionUtils.binary(ExpressionUtils.member(ExpressionUtils.field("order"), ["user"]), "==", ExpressionUtils.call("auth"))) }] },
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("update") }, { name: "condition", value: ExpressionUtils.binary(ExpressionUtils.call("auth"), "!=", ExpressionUtils._null()) }] },
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("post-update") }, { name: "condition", value: ExpressionUtils.binary(ExpressionUtils.binary(ExpressionUtils.binary(ExpressionUtils.member(ExpressionUtils.call("before"), ["name"]), "==", ExpressionUtils.field("name")), "&&", ExpressionUtils.binary(ExpressionUtils.member(ExpressionUtils.call("before"), ["category"]), "==", ExpressionUtils.field("category"))), "&&", ExpressionUtils.binary(ExpressionUtils.member(ExpressionUtils.call("before"), ["orderId"]), "==", ExpressionUtils._null())) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" }
            }
        },
        Order: {
            name: "Order",
            fields: {
                id: {
                    name: "id",
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    name: "updatedAt",
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                pets: {
                    name: "pets",
                    type: "Pet",
                    array: true,
                    relation: { opposite: "order" }
                },
                user: {
                    name: "user",
                    type: "User",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("userId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "orders", fields: ["userId"], references: ["id"] }
                },
                userId: {
                    name: "userId",
                    type: "String",
                    foreignKeyFor: [
                        "user"
                    ]
                }
            },
            attributes: [
                { name: "@@allow", args: [{ name: "operation", value: ExpressionUtils.literal("read,create") }, { name: "condition", value: ExpressionUtils.binary(ExpressionUtils.call("auth"), "==", ExpressionUtils.field("user")) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" }
            }
        }
    },
    authType: "User",
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
